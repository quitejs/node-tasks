// Generated by CoffeeScript 1.7.1
(function() {
  var End, Flow, Parallel, Series, T, Task, funcs, _,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  Flow = (function() {
    function Flow() {
      var tasks;
      tasks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.tasks = [];
      this.C.apply(this, tasks);
    }

    Flow.prototype.C = function() {
      var task, tasks, _i, _len;
      tasks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = tasks.length; _i < _len; _i++) {
        task = tasks[_i];
        if (task instanceof Task) {
          this.tasks.push(task);
        } else if (task instanceof Array) {
          this.C.apply(this, task);
        } else if (_.isFunction(task)) {
          this.C(T(task));
        }
      }
      return this;
    };

    return Flow;

  })();

  Parallel = (function(_super) {
    __extends(Parallel, _super);

    function Parallel() {
      this.run = __bind(this.run, this);
      this.limit = __bind(this.limit, this);
      Parallel.__super__.constructor.apply(this, arguments);
      this._ignore = false;
    }

    Parallel.prototype.limit = function(_limit) {
      this._limit = _limit;
      return this;
    };

    Parallel.prototype.ignoreErr = function() {
      this._ignoreErr = true;
      return this;
    };

    Parallel.prototype.run = function(cb) {
      var count, errs, results, task, _i, _len, _ref, _results;
      if (this.tasks.length === 0) {
        cb(new Error("tasks is empty"));
      }
      if (this._limit) {
        return this._runLimit(cb);
      }
      results = [];
      count = 0;
      errs = [];
      _ref = this.tasks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        count += 1;
        _results.push(task.run((function(_this) {
          return function(err, result) {
            count -= 1;
            if (err) {
              if (_this._ignoreErr) {
                errs.push(err);
              } else {
                count = 0;
                err = new Error("" + err.message + " in " + task);
                errs = err;
              }
            }
            if (count === 0) {
              if (errs.length === 0) {
                errs = null;
              }
              return cb(errs, _.pluck(_this.tasks, 'result'));
            }
          };
        })(this)));
      }
      return _results;
    };

    Parallel.prototype._runLimit = function(cb) {
      var count, next, order, results, task, _i, _len, _ref, _results;
      results = [];
      count = 0;
      order = this._limit;
      next = (function(_this) {
        return function(err, result) {
          count -= 1;
          if (order > 0 && (order < _this.tasks.length)) {
            _this.tasks[order].run(next);
            count += 1;
            order += 1;
          }
          if (count === 0) {
            cb(null, _.pluck(_this.tasks, 'result'));
          }
          if (err && (!_this._ignoreErr)) {
            return cb(err, _.pluck(_this.tasks, 'result'));
          }
        };
      })(this);
      _ref = this.tasks.slice(0, this._limit);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        count += 1;
        _results.push(task.run(next));
      }
      return _results;
    };

    return Parallel;

  })(Flow);

  Series = (function(_super) {
    __extends(Series, _super);

    function Series() {
      this._seriesRun = __bind(this._seriesRun, this);
      this.run = __bind(this.run, this);
      Series.__super__.constructor.apply(this, arguments);
      this._circle = false;
    }

    Series.prototype.run = function(cb) {
      var index, results;
      index = 0;
      results = [];
      return this._seriesRun(index, results, cb);
    };

    Series.prototype.ignoreErr = function() {
      this._ignoreErr = true;
      return this;
    };

    Series.prototype._seriesRun = function(index, results, cb) {
      var task;
      if (index === this.tasks.length) {
        this.got = typeof this.measurer === "function" ? this.measurer(results[-1]) : void 0;
        if (this.got) {
          cb(null, results);
        } else if (this._circle) {
          index = 0;
          this._circle -= 1;
        } else if (this._loop) {
          index = 0;
        } else {
          cb(null, results);
          return;
        }
      }
      task = this.tasks[index];
      return task.run((function(_this) {
        return function(err, result) {
          if (err && (!_this._ignoreErr)) {
            return cb(err, results);
          }
          results.push(result);
          if (task.cb) {
            task.cb(err, result, function(error, out) {
              if (error) {
                err = error;
                return cb(error, results);
              }
            });
            if (!err) {
              index += 1;
              return _this._seriesRun(index, results, cb);
            }
          } else {
            index += 1;
            return _this._seriesRun(index, results, cb);
          }
        };
      })(this));
    };

    Series.prototype.circle = function(_circle, measurer) {
      this._circle = _circle;
      this.measurer = measurer;
      if (!this._circle || (this._circle < 0)) {
        this._loop = true;
      }
      return this;
    };

    return Series;

  })(Flow);

  Task = (function() {
    function Task() {
      var args, cb, func, _i;
      func = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), cb = arguments[_i++];
      this.func = func;
      this.args = args;
      this.cb = cb;
      this.run = __bind(this.run, this);
      if (!this.func) {
        throw new Error("func can't be null, args: " + (JSON.stringify(this.args)));
      }
    }

    Task.prototype.toString = function() {
      return "executing " + (this.args.join(' and '));
    };

    Task.prototype.run = function(cb) {
      var arg, index, _i, _len, _ref;
      _ref = this.args;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        arg = _ref[index];
        if (arg instanceof Task) {
          this.args[index] = arg.result;
        }
      }
      return this.func.apply(this, __slice.call(this.args).concat([(function(_this) {
        return function(err, result) {
          _this.err = err;
          _this.result = result;
          return cb(_this.err, _this.result);
        };
      })(this)]));
    };

    return Task;

  })();

  End = (function() {
    function End(err, result) {
      this.err = err;
      this.result = result;
    }

    return End;

  })();

  T = function() {
    var args, cb, task, _i;
    task = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), cb = arguments[_i++];
    if ((cb !== void 0) && !(_.isFunction(cb) && (cb.length === 2 || cb.length === 3))) {
      args.push(cb);
      cb = null;
    }
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Task, [task].concat(__slice.call(args), [cb]), function(){});
  };

  _.extend(T, funcs = {
    series: function() {
      var tasks;
      tasks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Series, tasks, function(){});
    },
    parallel: function() {
      var tasks;
      tasks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Parallel, tasks, function(){});
    },
    end: function(err, result) {
      return new End(err, result);
    }
  });

  module.exports = T;

}).call(this);
